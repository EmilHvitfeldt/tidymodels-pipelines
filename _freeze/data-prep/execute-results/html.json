{
  "hash": "1e732a29f7d57778c79c6f01aa19266b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Data Preparation\"\n---\n\n\nThis page goes through how we generate the data set [laxflights2022](data/laxflights2022.csv) that is used throughout this project.\n\n## Loading packages\n\nWe load [tidyverse](https://www.tidyverse.org/) for general data manipulation and [anyflights](https://simonpcouch.github.io/anyflights/) to download the data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(anyflights)\n```\n:::\n\n\n## Downloading the data\n\nThe data set we are using can be downloaded with a single call to `get_flights()` \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlaxflights2022raw <- get_flights(\"LAX\", year = 2022, months = 1:12)\n```\n:::\n\n\nTo avoid repeated downloads, we save the data set right after we download it. Can be found at [data-raw/laxflights2022raw.csv](data-raw/laxflights2022raw.csv).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_csv(laxflights2022raw, \"data-raw/laxflights2022raw.csv\")\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n::: {.callout-tip}\n## Bad internet connection\n\nIf you are having issues with downloading this data all at once then you can split up the download into smaller chunks like so:\n\n```r\nlaxflights1 <- anyflights(\"LAX\", 2022, 1:6)\nlaxflights2 <- anyflights(\"LAX\", 2022, 7:12)\n\n\nlaxflights2022raw <- dplyr::bind_rows(\n  laxflights1$flights,\n  laxflights2$flights\n)\n```\n:::\n\n## Cleaning the data\n\nWe will do two things to this data set:\n\n- remove redundant variables\n- remove variables that won't be available at the prediction time\n\nWhen looking at the data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(laxflights2022raw)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 191,156\nColumns: 19\n$ year           <dbl> 2022, 2022, 2022, 2022, 2022, 2022, 2022, 2022, 2022, 2…\n$ month          <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ day            <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ dep_time       <dbl> 7, 14, 15, 23, 25, 31, 34, 109, 119, 122, 135, 139, 224…\n$ sched_dep_time <dbl> 2359, 2343, 2315, 30, 2259, 2312, 25, 59, 55, 50, 2340,…\n$ dep_delay      <dbl> 8, 31, 60, -7, 86, 79, 9, 10, 24, 32, 115, 9, 172, -2, …\n$ arr_time       <dbl> 459, 608, 733, 742, 745, 745, 611, 608, 643, 608, 1000,…\n$ sched_arr_time <dbl> 511, 540, 647, 820, 631, 636, 631, 615, 633, 552, 811, …\n$ arr_delay      <dbl> -12, 28, 46, -38, 74, 69, -20, -7, 10, 16, 109, -12, 12…\n$ carrier        <chr> \"UA\", \"AA\", \"NK\", \"AA\", \"NK\", \"NK\", \"UA\", \"NK\", \"DL\", \"…\n$ flight         <dbl> 468, 359, 44, 177, 185, 205, 600, 122, 317, 33, 276, 59…\n$ tailnum        <chr> \"N57864\", \"N919NN\", \"N949NK\", \"N812AA\", \"N903NK\", \"N509…\n$ origin         <chr> \"LAX\", \"LAX\", \"LAX\", \"LAX\", \"LAX\", \"LAX\", \"LAX\", \"LAX\",…\n$ dest           <chr> \"IAH\", \"BNA\", \"CLE\", \"PHL\", \"PIT\", \"DTW\", \"ORD\", \"IAH\",…\n$ air_time       <dbl> 153, 203, 234, 238, 240, 231, 187, 160, 177, 143, 298, …\n$ distance       <dbl> 1379, 1797, 2052, 2402, 2136, 1979, 1744, 1379, 1535, 1…\n$ hour           <dbl> 23, 23, 23, 0, 22, 23, 0, 0, 0, 0, 23, 1, 23, 5, 5, 5, …\n$ minute         <dbl> 59, 43, 15, 30, 59, 12, 25, 59, 55, 50, 40, 30, 32, 10,…\n$ time_hour      <dttm> 2022-01-01 23:00:00, 2022-01-01 23:00:00, 2022-01-01 2…\n```\n\n\n:::\n:::\n\n\nthe first thing we notice is that `time_hour` encodes almost the same information as `year`, `month`, `day`, `hour` and `minute`. With `minute` being the only difference. Let us deal with this by adding the minutes to `time_hour` and only keeping that variable\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlaxflights2022 <- laxflights2022raw |>\n  mutate(time = time_hour + minutes(minute)) |>\n  select(-c(year, month, day, hour, minute, time_hour))\n\nglimpse(laxflights2022)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 191,156\nColumns: 14\n$ dep_time       <dbl> 7, 14, 15, 23, 25, 31, 34, 109, 119, 122, 135, 139, 224…\n$ sched_dep_time <dbl> 2359, 2343, 2315, 30, 2259, 2312, 25, 59, 55, 50, 2340,…\n$ dep_delay      <dbl> 8, 31, 60, -7, 86, 79, 9, 10, 24, 32, 115, 9, 172, -2, …\n$ arr_time       <dbl> 459, 608, 733, 742, 745, 745, 611, 608, 643, 608, 1000,…\n$ sched_arr_time <dbl> 511, 540, 647, 820, 631, 636, 631, 615, 633, 552, 811, …\n$ arr_delay      <dbl> -12, 28, 46, -38, 74, 69, -20, -7, 10, 16, 109, -12, 12…\n$ carrier        <chr> \"UA\", \"AA\", \"NK\", \"AA\", \"NK\", \"NK\", \"UA\", \"NK\", \"DL\", \"…\n$ flight         <dbl> 468, 359, 44, 177, 185, 205, 600, 122, 317, 33, 276, 59…\n$ tailnum        <chr> \"N57864\", \"N919NN\", \"N949NK\", \"N812AA\", \"N903NK\", \"N509…\n$ origin         <chr> \"LAX\", \"LAX\", \"LAX\", \"LAX\", \"LAX\", \"LAX\", \"LAX\", \"LAX\",…\n$ dest           <chr> \"IAH\", \"BNA\", \"CLE\", \"PHL\", \"PIT\", \"DTW\", \"ORD\", \"IAH\",…\n$ air_time       <dbl> 153, 203, 234, 238, 240, 231, 187, 160, 177, 143, 298, …\n$ distance       <dbl> 1379, 1797, 2052, 2402, 2136, 1979, 1744, 1379, 1535, 1…\n$ time           <dttm> 2022-01-01 23:59:00, 2022-01-01 23:43:00, 2022-01-01 2…\n```\n\n\n:::\n:::\n\n\nNext, we see that the combination of `dep_time`, `sched_dep_time` and `dep_delay` is linearly dependent as `dep_time - sched_dep_time = dep_delay`, so we can remove `sched_dep_time` and `dep_time` without losing any information since we also have `sched_dep_time` as a function of `time`. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlaxflights2022 <- laxflights2022 |>\n  select(-c(sched_dep_time, dep_time))\n\nglimpse(laxflights2022)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 191,156\nColumns: 12\n$ dep_delay      <dbl> 8, 31, 60, -7, 86, 79, 9, 10, 24, 32, 115, 9, 172, -2, …\n$ arr_time       <dbl> 459, 608, 733, 742, 745, 745, 611, 608, 643, 608, 1000,…\n$ sched_arr_time <dbl> 511, 540, 647, 820, 631, 636, 631, 615, 633, 552, 811, …\n$ arr_delay      <dbl> -12, 28, 46, -38, 74, 69, -20, -7, 10, 16, 109, -12, 12…\n$ carrier        <chr> \"UA\", \"AA\", \"NK\", \"AA\", \"NK\", \"NK\", \"UA\", \"NK\", \"DL\", \"…\n$ flight         <dbl> 468, 359, 44, 177, 185, 205, 600, 122, 317, 33, 276, 59…\n$ tailnum        <chr> \"N57864\", \"N919NN\", \"N949NK\", \"N812AA\", \"N903NK\", \"N509…\n$ origin         <chr> \"LAX\", \"LAX\", \"LAX\", \"LAX\", \"LAX\", \"LAX\", \"LAX\", \"LAX\",…\n$ dest           <chr> \"IAH\", \"BNA\", \"CLE\", \"PHL\", \"PIT\", \"DTW\", \"ORD\", \"IAH\",…\n$ air_time       <dbl> 153, 203, 234, 238, 240, 231, 187, 160, 177, 143, 298, …\n$ distance       <dbl> 1379, 1797, 2052, 2402, 2136, 1979, 1744, 1379, 1535, 1…\n$ time           <dttm> 2022-01-01 23:59:00, 2022-01-01 23:43:00, 2022-01-01 2…\n```\n\n\n:::\n:::\n\n\nOn a similar note, since we are trying to predict `arr_delay`, we can't have `arr_time` or `air_time` in the data set as they allow us to figure out `arr_delay` from `dep_time`. With some loss of information, we will also remove `sched_arr_time` to make the modeling a little easier.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlaxflights2022 <- laxflights2022 |>\n  select(-c(arr_time, air_time, sched_arr_time))\n\nglimpse(laxflights2022)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 191,156\nColumns: 9\n$ dep_delay <dbl> 8, 31, 60, -7, 86, 79, 9, 10, 24, 32, 115, 9, 172, -2, 16, -…\n$ arr_delay <dbl> -12, 28, 46, -38, 74, 69, -20, -7, 10, 16, 109, -12, 122, -1…\n$ carrier   <chr> \"UA\", \"AA\", \"NK\", \"AA\", \"NK\", \"NK\", \"UA\", \"NK\", \"DL\", \"NK\", …\n$ flight    <dbl> 468, 359, 44, 177, 185, 205, 600, 122, 317, 33, 276, 595, 51…\n$ tailnum   <chr> \"N57864\", \"N919NN\", \"N949NK\", \"N812AA\", \"N903NK\", \"N509NK\", …\n$ origin    <chr> \"LAX\", \"LAX\", \"LAX\", \"LAX\", \"LAX\", \"LAX\", \"LAX\", \"LAX\", \"LAX…\n$ dest      <chr> \"IAH\", \"BNA\", \"CLE\", \"PHL\", \"PIT\", \"DTW\", \"ORD\", \"IAH\", \"MSP…\n$ distance  <dbl> 1379, 1797, 2052, 2402, 2136, 1979, 1744, 1379, 1535, 1235, …\n$ time      <dttm> 2022-01-01 23:59:00, 2022-01-01 23:43:00, 2022-01-01 23:15:…\n```\n\n\n:::\n:::\n\n\nWe will also be removing the `flight` variable to have one less high cardinality variable to work with.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlaxflights2022 <- laxflights2022 |>\n  select(-flight)\n\nglimpse(laxflights2022)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 191,156\nColumns: 8\n$ dep_delay <dbl> 8, 31, 60, -7, 86, 79, 9, 10, 24, 32, 115, 9, 172, -2, 16, -…\n$ arr_delay <dbl> -12, 28, 46, -38, 74, 69, -20, -7, 10, 16, 109, -12, 122, -1…\n$ carrier   <chr> \"UA\", \"AA\", \"NK\", \"AA\", \"NK\", \"NK\", \"UA\", \"NK\", \"DL\", \"NK\", …\n$ tailnum   <chr> \"N57864\", \"N919NN\", \"N949NK\", \"N812AA\", \"N903NK\", \"N509NK\", …\n$ origin    <chr> \"LAX\", \"LAX\", \"LAX\", \"LAX\", \"LAX\", \"LAX\", \"LAX\", \"LAX\", \"LAX…\n$ dest      <chr> \"IAH\", \"BNA\", \"CLE\", \"PHL\", \"PIT\", \"DTW\", \"ORD\", \"IAH\", \"MSP…\n$ distance  <dbl> 1379, 1797, 2052, 2402, 2136, 1979, 1744, 1379, 1535, 1235, …\n$ time      <dttm> 2022-01-01 23:59:00, 2022-01-01 23:43:00, 2022-01-01 23:15:…\n```\n\n\n:::\n:::\n\n\nSince we are trying to model `arr_delay` we exclude all the flights where that information is missing.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlaxflights2022 <- laxflights2022 |>\n  drop_na(arr_delay)\n\nglimpse(laxflights2022)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 187,868\nColumns: 8\n$ dep_delay <dbl> 8, 31, 60, -7, 86, 79, 9, 10, 24, 32, 115, 9, 172, -2, 16, -…\n$ arr_delay <dbl> -12, 28, 46, -38, 74, 69, -20, -7, 10, 16, 109, -12, 122, -1…\n$ carrier   <chr> \"UA\", \"AA\", \"NK\", \"AA\", \"NK\", \"NK\", \"UA\", \"NK\", \"DL\", \"NK\", …\n$ tailnum   <chr> \"N57864\", \"N919NN\", \"N949NK\", \"N812AA\", \"N903NK\", \"N509NK\", …\n$ origin    <chr> \"LAX\", \"LAX\", \"LAX\", \"LAX\", \"LAX\", \"LAX\", \"LAX\", \"LAX\", \"LAX…\n$ dest      <chr> \"IAH\", \"BNA\", \"CLE\", \"PHL\", \"PIT\", \"DTW\", \"ORD\", \"IAH\", \"MSP…\n$ distance  <dbl> 1379, 1797, 2052, 2402, 2136, 1979, 1744, 1379, 1535, 1235, …\n$ time      <dttm> 2022-01-01 23:59:00, 2022-01-01 23:43:00, 2022-01-01 23:15:…\n```\n\n\n:::\n:::\n\n\nLastly, the outcome `arr_delay` has been moved to the beginning of the data set as it aids in investigating the data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlaxflights2022 <- laxflights2022 |>\n  relocate(arr_delay)\n\nglimpse(laxflights2022)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 187,868\nColumns: 8\n$ arr_delay <dbl> -12, 28, 46, -38, 74, 69, -20, -7, 10, 16, 109, -12, 122, -1…\n$ dep_delay <dbl> 8, 31, 60, -7, 86, 79, 9, 10, 24, 32, 115, 9, 172, -2, 16, -…\n$ carrier   <chr> \"UA\", \"AA\", \"NK\", \"AA\", \"NK\", \"NK\", \"UA\", \"NK\", \"DL\", \"NK\", …\n$ tailnum   <chr> \"N57864\", \"N919NN\", \"N949NK\", \"N812AA\", \"N903NK\", \"N509NK\", …\n$ origin    <chr> \"LAX\", \"LAX\", \"LAX\", \"LAX\", \"LAX\", \"LAX\", \"LAX\", \"LAX\", \"LAX…\n$ dest      <chr> \"IAH\", \"BNA\", \"CLE\", \"PHL\", \"PIT\", \"DTW\", \"ORD\", \"IAH\", \"MSP…\n$ distance  <dbl> 1379, 1797, 2052, 2402, 2136, 1979, 1744, 1379, 1535, 1235, …\n$ time      <dttm> 2022-01-01 23:59:00, 2022-01-01 23:43:00, 2022-01-01 23:15:…\n```\n\n\n:::\n:::\n\n\n## Saving the data\n\nThe full data set is now ready and is saved as [data/laxflights2022.csv](data/laxflights2022.csv).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_csv(laxflights2022, \"data/laxflights2022.csv\")\n```\n:::\n\n\nA smaller version of the data set is also created and is saved as [data/laxflights2022_lite.csv](data/laxflights2022_lite.csv).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\nlaxflights2022_lite <- laxflights2022 |>\n  slice_sample(prop = 0.02) %>%\n  arrange(time)\nwrite_csv(laxflights2022_lite, \"data/laxflights2022_lite.csv\")\n```\n:::\n\n\n## Data dictionary\n\n- `arr_delay`: Arrival delays, in minutes. Negative times represent early arrivals.\n- `dep_delay`: Departure delays, in minutes. Negative times represent early departures.\n- `carrier`: Two letter carrier abbreviation.\n- `tailnum`: Plane tail number.\n- `origin`: FAA airport code for origin of flight.\n- `dest`: FAA airport code for destination of flight.\n- `distance`: Distance between airports, in miles.\n- `time`: Scheduled time of the flight as a POSIXct date, rounded to the nearest minute.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}