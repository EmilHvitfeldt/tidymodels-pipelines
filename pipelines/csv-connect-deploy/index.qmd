---
title: Posit Connect, CSV Input, Native Endpoint
description: "Using vetiver to version a model on Posit Connect as an endpoint, and predict from it"
image: ../../images/csv-connect-deploy.jpg
categories:
  - csv
  - vetiver
  - Posit Connect
---

::: {.callout-note}
This page was last generated on 2024-03-08. If you find the code out of date please [file an issue](https://github.com/EmilHvitfeldt/tidymodels-pipelines/issues/new).
:::

{{< include ../../_include-changes-from-standard.qmd >}}

::: new

## Loading packages

We are using the tidymodels package to do the modeling, [embed](https://embed.tidymodels.org/) for target encoding, [pins](https://pins.rstudio.com/) for versioning,  [vetiver](https://vetiver.rstudio.com/) for version and deployment, and [rsconnect](https://rstudio.github.io/rsconnect/) for connecting with [Posit Connect](https://posit.co/products/enterprise/connect/).

```{r}
#| label: setup
#| message: false
# install.packages("pak")
# pak::pak("tidymodels", "embed", "vetiver", "pins", "rsconnect")
library(tidymodels)
library(embed)
library(vetiver)
library(pins)
library(rsconnect)
```

:::

## Loading Data

We are using the smaller `laxflights2022` data set described on the [data preparation](../../data-prep.qmd) page.

```{r}
#| label: loading-data
#| message: false
flights <- readr::read_csv(here::here("data/laxflights2022_lite.csv"))

glimpse(flights)
```

{{< include ../../_include-modeling.qmd >}}

## Creating vetiver model

```{r}
v <- xgb_last %>%
  extract_workflow() %>%
  vetiver_model("emil.hvitfeldt/flights_xgb")
v
```

## Version model with pins on Posit Connect

We will version this model on [Posit Connect](https://posit.co/products/enterprise/connect/) using the [pins](https://pins.rstudio.com/) package.

{{< include ../../_include-envvar-connect.qmd >}}

{vetiver} uses the {rsconnect} package to connect to Posit Connect, we need to make sure that we are [setup correctly](https://rstudio.github.io/rsconnect/#setup). 

First, we need to register your server with rsconnect, this is done using `rsconnect::addServer(server = "https://example.com/")` with the correct url for the server. After we are connected, we can use the account and API key we just found with `rsconnect::connectApiUser()` to connect as an user.

```markdown
rsconnect::connectApiUser(
  account = "account.name",
  server = "https://example.com/", 
  apiKey = "...."
)
```

Once that is all done, we can create a board that connects to Connect, and write our vetiver model to the board.

```{r}
#| message: false
board <- board_connect()
vetiver_pin_write(board, v)
```


We can use `vetiver_deploy_rsconnect()`, it takes a `board` and the name of endpoint. Depending on your model, it will take a little while to run as it installs what it needs.

```{r}
#| eval: false
endpoint <- vetiver_deploy_rsconnect(
  board = board, 
  name = "emil.hvitfeldt/flights_xgb"
)
```

Once this finishes running, you might get a pop-up website with your endpoint information. It should also print to the console. You can also find it in Connect itself. What we need is the "CONTENT URL".

## Make predictions from Connect endpoint

Now that we have the content url we can create an endpoint with `vetiver_endpoint()`, and that endpoint can be used as a way to make predictions. The content url we got earlier should replace `$APP_ID` below. Note that it is very important that we end the endpoint with `/predict`.

```{r}
#| eval: false
endpoint <- vetiver_endpoint("https://colorado.posit.co/rsc/content/$APP_ID/predict")
```

And now we are ready to predict! With the endpoint we can pass in some data set to predict with. Authorization is done in a header that uses the `CONNECT_API_KEY` environment variable we created earlier.

```{r}
#| eval: false
predict(
  endpoint,
  flights_training,
  httr::add_headers(Authorization = paste("Key", Sys.getenv("CONNECT_API_KEY")))
)
```

```{r}
#| echo: false
tibble::tibble(
  .pred = c(-1.7894, -13.3206, -17.2753, -3.6661, 82.8237, 52.177, 10.7185, 8.0357, 58.146, 5.3933, rep(0, 2807)),
)
```

:::
