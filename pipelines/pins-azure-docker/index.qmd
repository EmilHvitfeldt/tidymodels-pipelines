---
title: Azure, Pins Input, Docker Endpoint
description: "Using vetiver to version a model in a Azure Storage Container, and predict with it from a Docker container"
image: ../../images/pins-azure-docker.jpg
categories:
  - pins
  - vetiver
  - Docker
  - Azure
---

::: {.callout-note}
This page was last generated on 2024-03-13. If you find the code out of date please [file an issue](https://github.com/EmilHvitfeldt/tidymodels-pipelines/issues/new).
:::

{{< include ../../_include-changes-from-standard.qmd >}}

::: new

## Loading packages

We are using the tidymodels package to do the modeling, [embed](https://embed.tidymodels.org/) for target encoding, [pins](https://pins.rstudio.com/) for versioning,  [vetiver](https://vetiver.rstudio.com/) for version and deployment, and [AzureStor](https://cran.r-project.org/web/packages/AzureStor/index.html) for connecting with Azure Storage.

```{r}
#| label: setup
#| message: false
library(tidymodels)
library(embed)
library(vetiver)
library(pins)
library(AzureStor)
```

:::

::: new

## Loading data from Posit Connect with pins

We will fetch data from and version the final model on [Azure storage](https://learn.microsoft.com/en-us/azure/storage/) using the [pins](https://pins.rstudio.com/) package.

{{< include ../../_include-envvar-azure.qmd >}}

## Loading Data

We are using the smaller `laxflights2022` data set described on the [data preparation](../../data-prep.qmd) page. The data set has been uploaded to pins, as described on the [data pins](../../data-pins.qmd#azure) page.

```{r}
#| label: loading-data
#| message: false
library(pins)
library(AzureStor)

container <-
  storage_container(
    endpoint = Sys.getenv("AZURE_CONTAINER_ENDPOINT"),
    sas = Sys.getenv("AZURE_SAS_KEY")
  )

board <- board_azure(container)

flights <- board |> 
  pin_read("laxflights2022_lite")

glimpse(flights)
```

:::

{{< include ../../_include-modeling.qmd >}}

## Creating vetiver model

```{r}
v <- xgb_last %>%
  extract_workflow() %>%
  vetiver_model("flights_xgb")
v
```

## Version model with pins on Azure

We will version this model on [Azure](https://portal.azure.com/#home) using the [pins](https://pins.rstudio.com/) package.

We will use the `board` we created earlier to load the data.

```{r}
#| message: false
vetiver_pin_write(board, v)
```

## Create Docker artifacts

To build a Docker image that can serve your model, you need three artifacts:

- the Dockerfile itself,
- a `renv.lock` to capture your model dependencies, and
- an `plumber.R` file containing the information to serve a vetiver REST API.

You can create all the needed files with one function.

```{r}
#| message: false
vetiver_prepare_docker(
  board, 
  "flights_xgb", 
  docker_args = list(port = 8080)
)
```

::: {.callout-note}
Keep an eye on the value of `port`, we want to make sure we use the same throughout the whole pipeline.
:::

For ease of use, we make sure only to have CRAN versions of packages.

## Build and run your Dockerfile

Now that we have everything we need to build a Docker image. We have one more thing to do. Install [Docker](https://www.docker.com/get-started/) if you haven't already, then launch it so we can interact with it from the [command line](https://docs.docker.com/engine/reference/commandline/cli/) (not from R). Use the following [docker build](https://docs.docker.com/engine/reference/commandline/build/) command. Notice that we can give it a "name" using the `--tag` flag. The `.` here denotes the path to the build context. Which in this example is the folder we are in.

```bash
docker build --tag flights .
```

::: {.callout-tip}
If you are on an ARM architecture locally and deploying an R model, use `--platform linux/amd64` for RSPMâ€™s fast installation of R package binaries.
:::

To run the docker container, we need to pass in the environment variables for the code to connect to the Connect server. We could pass in the system environment variables, but we will be safer if we just pass in what we need. We do this by creating a project-specific `.Renviron` file. (`fs::file_touch(".Renviron")`) and specifying `AZURE_CONTAINER_ENDPOINT` and `AZURE_SAS_KEY` in that file.

Then we run [docker run](https://docs.docker.com/engine/reference/commandline/run/) command. We set 2 flags, `--env-file` to pass in the environment variables we need, and `--publish` to specify the port.

```bash
docker run --env-file .Renviron --publish 8080:8080 flights
```

## Make predictions from Docker container

Now that the docker container is running we can create an endpoint with `vetiver_endpoint()`, and that endpoint can be used as a way to make predictions.

```{r}
#| eval: false
endpoint <- vetiver_endpoint("http://0.0.0.0:8080/predict")

predict(endpoint, flights_training)
```

```{r}
#| echo: false
tibble::tibble(
  .pred = c(-1.7894, -13.3206, -17.2753, -3.6661, 82.8237, 52.177, 10.7185, 8.0357, 58.146, 5.3933, rep(0, 2807)),
)
```

:::
